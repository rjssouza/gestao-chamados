<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChamadosApi</name>
    </assembly>
    <members>
        <member name="T:ChamadosApi.Attribute.CustomHeaderSwaggerAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Attribute.CustomHeaderSwaggerAttribute.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
             <summary>
            
             </summary>
             <param name="operation"></param>
             <param name="context"></param>
        </member>
        <member name="T:ChamadosApi.Controllers.ChamadoController">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.#ctor(System.IServiceProvider)">
            <summary>
            Construtor
            </summary>
            <param name="serviceProvider">Service provider</param>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.DeleteAnexo(System.Int32)">
            <summary>
            Remover anexo do chamado
            </summary>
            <param name="idAnexo">Id do Anexo</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.Get(System.Int32)">
            <summary>
            Detalhe do chamado
            </summary>
            <param name="idChamado">Id do Chamado</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.GetAnexoAsync(System.Int32)">
            <summary>
            Anexo para baixar
            </summary>
            <param name="idAnexo">Anexo para baixar</param>
            <returns>Base 64 do Anexo</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.Post(Chamados.Application.ViewModels.Formulario.FormularioResposta.FormularioRespostaViewModel)">
            <summary>
            Abre chamado a partir de um formulario de resposta
            </summary>
            <param name="formularioRespostaViewModel">Formulario de resposta</param>
            <returns>Id do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.Post(Chamados.Application.ViewModels.Chamado.RegistrarProgressoChamadoViewModel)">
             <summary>
            
             </summary>
             <param name="registrarProgressoChamadoViewModel"></param>
             <returns></returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.PostAnexo(Chamados.Application.ViewModels.Chamado.AdicionarAnexoChamadoViewModel)">
            <summary>
            Adicionar anexo(s) ao chamado
            </summary>
            <param name="modeloEntrada">Anexo para inclusão</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.PostAtendente(Chamados.Application.ViewModels.Chamado.AtendenteChamadoViewModel)">
            <summary>
            Atendente do chamado
            </summary>
            <param name="modeloEntrada">Atendente para o chamado</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.PostComentario(Chamados.Application.ViewModels.Chamado.AdicionarComentarioChamadoViewModel)">
            <summary>
            Adicionar comentário ao chamado
            </summary>
            <param name="modeloEntrada">Comentário para inclusão</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.PostFechar(System.Int32,System.String)">
            <summary>
            Fechar chamado
            </summary>
            <param name="idChamado">Id do chamado</param>
            <param name="atendimento">Sobre o atendimento realizado</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.ChamadoController.PostIniciarAtendimento(System.Int32)">
            <summary>
            Iniciar atendimento do chamado
            </summary>
            <param name="idChamado">Id do chamado</param>
            <returns>Detalhe do chamado</returns>
        </member>
        <member name="T:ChamadosApi.Controllers.DashboardAreaController">
            <summary>
            Controller responsável por gerenciar as ações do dashboard
            </summary>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardAreaController.#ctor(System.IServiceProvider)">
             <summary>
            
             </summary>
             <param name="serviceProvider"></param>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardAreaController.ListarChamados">
            <summary>
            Listar chamados
            </summary>
            <returns>Lista de chamados</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardAreaController.ListarChamadosTotalMaquinasImpactadas">
            <summary>
            Totalizador Maquinas
            </summary>
            <returns>Lista de chamados</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardAreaController.ObterIncidentesPorAreaStatus">
            <summary>
            Obter contador de incidentes por area status
            </summary>
            <returns>Incidentes por area status</returns>
        </member>
        <member name="T:ChamadosApi.Controllers.DashboardController">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.#ctor(System.IServiceProvider)">
            <summary>
            Construtor
            </summary>
            <param name="serviceProvider">Service provider</param>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.Get">
            <summary>
            Obter view model da tela de dashboard
            </summary>
            <returns>Dashboard</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ListarChamados(System.Int32,System.Int32)">
            <summary>
            Listar chamados por usuario, ou administrador
            </summary>
            <param name="skip">Pagina atual</param>
            <param name="take">Itens por pagina</param>
            <returns>Lista de chamados</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ObterEvolutivo">
            <summary>
            Obter evolutivo mensal
            </summary>
            <returns>Evolutivo mensal</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ObterIncidentesPorArea">
            <summary>
            Obter contador de incidentes por area
            </summary>
            <returns>Incidentes por area</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ObterIncidentesPorAreaStatus">
            <summary>
            Obter contador de incidentes por area status
            </summary>
            <returns>Incidentes por area status</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ObterIncidentesPorAreaTipo">
            <summary>
            Obter contador de incidentes por area status
            </summary>
            <returns>Incidentes por area status</returns>
        </member>
        <member name="M:ChamadosApi.Controllers.DashboardController.ObterTotalizadores">
            <summary>
            Obter totalizadores de chamados
            </summary>
            <returns>Lista de totalizadores</returns>
        </member>
        <member name="T:ChamadosApi.Controllers.EnvController">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Controllers.EnvController.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
             <summary>
            
             </summary>
             <param name="configuration"></param>
        </member>
        <member name="M:ChamadosApi.Controllers.EnvController.Get">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:ChamadosApi.Controllers.FormularioController">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Controllers.FormularioController.#ctor(System.IServiceProvider)">
            <summary>
            Construtor
            </summary>
            <param name="serviceProvider">Service provider</param>
        </member>
        <member name="M:ChamadosApi.Controllers.FormularioController.Get(System.Int32)">
            <summary>
            Obtem formulario para montar a interface angular
            </summary>
            <param name="idArea">Identificador da área (default 1)</param>
            <returns>Objeto de formulario</returns>
            [AllowAnonymous]
        </member>
        <member name="T:ChamadosApi.Filter.ExceptionFilter">
            <summary>
            Filtro de exceção
            </summary>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{ChamadosApi.Filter.ExceptionFilter})">
            <summary>
            Construtor de exceção utilizando logger registrado no modulo ioc
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Método disparado quando a api estoura uma exceção
            </summary>
            <param name="context">Contexto da exceção</param>
            <returns>Resposta http</returns>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.NotifyDev">
            <summary>
            Efetua notificação do time de desenvolvimento
            </summary>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.ObterCodigoHttp(System.Exception)">
            <summary>
            Obtem código http da exceção de acordo com o tipo retornado da exceção
            </summary>
            <param name="excecao">Exceção</param>
            <returns>Http Status Code</returns>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.ObterMensagem(System.Exception)">
            <summary>
            Obtém mensagem da exeção da mensagem de forma legível na resposta http
            </summary>
            <param name="excecao">Eceção retornada</param>
            <returns>Texto da mensagem</returns>
        </member>
        <member name="M:ChamadosApi.Filter.ExceptionFilter.WriteLog(System.Exception)">
            <summary>
            Método para escrever log utilizando o logger customizado
            </summary>
            <param name="ex">Exceção</param>
        </member>
        <member name="T:ChamadosApi.Program">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Program.CreateHostBuilder(System.String[])">
             <summary>
            
             </summary>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="M:ChamadosApi.Program.Main(System.String[])">
             <summary>
            
             </summary>
             <param name="args"></param>
        </member>
        <member name="T:ChamadosApi.Startup">
             <summary>
            
             </summary>
        </member>
        <member name="M:ChamadosApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="M:ChamadosApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:ChamadosApi.Startup.SecureApi(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
             <summary>
            
             </summary>
             <param name="services"></param>
             <param name="configuration"></param>
        </member>
        <member name="T:ChamadosApi.Utils">
            <summary>
            Utils
            </summary>
        </member>
        <member name="M:ChamadosApi.Utils.GetContentType(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="T:ChamadosApi.WeatherForecast">
             <summary>
            
             </summary>
        </member>
        <member name="P:ChamadosApi.WeatherForecast.Date">
             <summary>
            
             </summary>
             <value></value>
        </member>
        <member name="P:ChamadosApi.WeatherForecast.Summary">
             <summary>
            
             </summary>
             <value></value>
        </member>
        <member name="P:ChamadosApi.WeatherForecast.TemperatureC">
             <summary>
            
             </summary>
             <value></value>
        </member>
        <member name="P:ChamadosApi.WeatherForecast.TemperatureF">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
    </members>
</doc>
